version: '3'

services:
  app1:
    build:
      context: ./
    volumes:
      - ./data/app1:/app/data
    ports:
      - 3100:3100
    command: npm run serve
    links:
      - particld1
      - particld2
    depends_on:
      - particld1
      - particld2
    environment:
      - NODE_ENV=development
      - APP_PORT=3100
# RPC-CLIENT-CONFIG:
      - RPCUSER=test
      - RPCPASSWORD=test
      - RPCHOSTNAME=particld1
      - MAINNET_PORT=51738
      - TESTNET_PORT=51935

  app2:
    build:
      context: ./
    volumes:
      - ./data/app2:/app/data
    ports:
      - 3200:3200
    command: npm run serve
    links:
      - particld1
      - particld2
    depends_on:
      - particld1
      - particld2
    environment:
      - NODE_ENV=development
      - APP_PORT=3200
# RPC-CLIENT-CONFIG:
      - RPCUSER=test
      - RPCPASSWORD=test
      - RPCHOSTNAME=particld2
      - MAINNET_PORT=51738
      - TESTNET_PORT=51935

  particld1:
    image: ludx/particl:0.15.1.2
    volumes:
      - ./data/particl1:/root/.particl
    ports:
      - 52738:51738
      - 52935:51935
    environment:
      - CONF_TESTNET=1                 # Use the test chain
      - CONF_RPCUSERNAME=test           # Username for JSON-RPC connections, generated unless set
      - CONF_RPCPASSWORD=test           # Password for JSON-RPC connections, generated unless set
      - CONF_PRINTTOCONSOLE=1           # Send trace/debug info to console instead of debug.log file
#      - CONF_ONLYNET=onion              # Only connect to nodes in network: ipv4, ipv6 or onion
#      - CONF_PROXY=127.0.0.1:9050       # Connect through SOCKS5 proxy
#      - CONF_ONION=127.0.0.1:9050       # Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
      - CONF_SERVER=1                   # Accept command line and JSON-RPC commands
#      - CONF_RPCALLOWIP=*
      - CONF_RPCALLOWIP=0.0.0.0/0       # Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).
#      - CONF_REST=0                    # Accept public REST requests (default: 0)
      - CONF_LISTEN=1                   # Accept connections from outside (default: 1 if no -proxy or -connect)
#      - CONF_LISTENONION=1              # Automatically create Tor hidden service (default: 1)
#      - CONF_TORCONTROL=127.0.0.1:9051  # Tor control port to use if onion listening enabled (default: 127.0.0.1:9051)
#      - CONF_TORPASSWORD=particltor     # Tor control port password, generated unless set
#      - CONF_DISCOVER=1                # Discover own IP address (default: 1 when listening and no -externalip)
#      - CONF_BIND=127.0.0.1             # Bind to given address and always listen on it. Use [host]:port notation for IPv6
#      - CONF_DEBUG=tor                    # Output debugging information: 0/1, addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq, qt.

  particld2:
    image: ludx/particl:0.15.1.2
    volumes:
      - ./data/particl2:/root/.particl
    ports:
      - 53738:51738
      - 53935:51935
    environment:
      - CONF_TESTNET=1                 # Use the test chain
      - CONF_RPCUSERNAME=test           # Username for JSON-RPC connections, generated unless set
      - CONF_RPCPASSWORD=test           # Password for JSON-RPC connections, generated unless set
      - CONF_PRINTTOCONSOLE=1           # Send trace/debug info to console instead of debug.log file
      - CONF_SERVER=1                   # Accept command line and JSON-RPC commands
      - CONF_RPCALLOWIP=0.0.0.0/0       # Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).
      - CONF_LISTEN=1                   # Accept connections from outside (default: 1 if no -proxy or -connect)
